<template>
  <view class="container">
    <swiper class="slider-box" indicator-dots="{{indicatorDots}}" indicator-color="{{indicatorColor}}" indicator-active-color="{{indicatorActiveColor}}" autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}">
      <repeat for="{{silderImg}}" key="index" index="index" item="item">
        <block>
          <swiper-item class="slider-item">
            <image src="{{item.img}}" class="slide-image" mode="scaleToFill" />
            <text class="slider-txt">{{item.content}}</text>
          </swiper-item>
        </block>
      </repeat>
    </swiper>
    <view class="vc-article">
      <repeat for="{{vcImg}}" key="item" index="index" item="item">
        <homeVc :vc.sync="item"></homeVc>
      </repeat>
      <article></article>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import homeVc from '../components/common/homeVc'
  import article from '../components/common/article'
  import {
    connect,
    getStore
  } from 'wepy-redux'
  import {
    asyncHomeSliderImg,
    asyncHomeVcImg
  } from '../store/actions'
  import {
    formatMsgTime
  } from '../utils/format'
  import Request from '../api/home'
  import { DOMParser } from '../utils/xml2json/dom-parser'
  @connect({
    silderImg(state) {
      return state.homePage.sliderImg
    },
    vcImg(state) {
      // state.homePage.vcImg.pubDate = formatMsgTime(new Date())
      return state.homePage.vcImg
    }
  })
  export default class extends wepy.page {
    config = {
      navigationBarTitleText: '十分之约'
    }
    data = {
      indicatorDots: true,
      autoplay: true,
      interval: 3000,
      duration: 2000,
      indicatorColor: 'rgba(0, 0, 0, .8)',
      indicatorActiveColor: '#FF6A3C',
      url: {
        article: './techArticle'
      }
    }
    components = {
      homeVc,
      article
    }
    setGridData(data) {
      const store = getStore()
      wepy.showLoading({
        title: 'loading...'
      })
      const xmlParser = new DOMParser()
      const doc = xmlParser.parseFromString(data)
      const item = [...doc.getElementsByTagName('item')].map(item => {
        const reg = /(?:<img[^]+?src=")(.*?\.jpg|gif|png)(?:"[^]+?\/>)/i
        const title = item.getElementsByTagName('title')[0].childNodes[0].data
        const link = item.getElementsByTagName('link')[0].childNodes[0].data
        const pubDate = formatMsgTime(item.getElementsByTagName('pubDate')[0].childNodes[0].data)
        const cover = reg.exec(item.getElementsByTagName('content:encoded')[0].firstChild.data)[1]
        return {
          title,
          link,
          pubDate,
          cover
        }
      })
      // console.log(`title`, doc.getElementsByTagName('item')[0].getElementsByTagName('title')[0].childNodes[0].data)
      // console.log(`link`, doc.getElementsByTagName('item')[0].getElementsByTagName('link')[0].childNodes[0].data)
      // console.log(`pubDate`, doc.getElementsByTagName('item')[0].getElementsByTagName('pubDate')[0].childNodes[0].data)
      // console.log(`guid`, doc.getElementsByTagName('item')[0].getElementsByTagName('guid')[0].childNodes[0].data)
      // const reg = /(?:<img[^]+?src=")(.*?\.jpg|gif|png)(?:"[^]+?\/>)/i
      // console.log(`cover`, reg.exec(doc.getElementsByTagName('item')[0].getElementsByTagName('content:encoded')[0].firstChild.data)[0])
      Promise.all([store.dispatch(asyncHomeSliderImg()), store.dispatch(asyncHomeVcImg(item))]).then(() => {
        wepy.hideLoading()
      })
    }
    async onLoad() {
      const homeData = await Request.getInfo()
      this.setGridData(homeData)
      // arr.forEach(val => {
      //   console.log(`Date`, new Date(+new Date(val.pubDate)))
      //   val.pubDate = formatMsgTime()
      // })
      // this.time = formatMsgTime(new Date())
    }
    methods = {
      viewDetails () {
        wepy.navigateTo({
          url: `./techArticle`
        })
      }
    }
  }
</script>

<style lang="less">
  .slider-box {
    .slider-item {
      position: relative;
      .slide-image {
        width: 100vw;
        height: 100%;
      }
      .slider-txt {
        color: rgba(255, 255, 255, .5);
        background: rgba(0, 0, 0, .5);
        position: absolute;
        top: 0;
        left: 0;
        width: 100vw;
      }
    }
  }
  .vc-article{
    padding: 0 0 30rpx;
  }
</style>
