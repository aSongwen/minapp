<template>
  <view class="container">
    <swiper class="slider-box" indicator-dots="{{indicatorDots}}" indicator-color="{{indicatorColor}}" indicator-active-color="{{indicatorActiveColor}}" autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}">
      <repeat for="{{silderImg}}" key="index" index="index" item="item">
        <block>
          <swiper-item class="slider-item" @tap="spiderJump" data-link="{{item.link}}">
            <image lazy-load="true" mode="aspectFill" src="{{item.miniCover}}" class="slide-image" binderror="handleError" />
            <view class="slider-content">
              <text class="slider-txt">{{item.title}}</text>
              <text class="slider-time">{{item.pubDate}}</text>
            </view>
          </swiper-item>
        </block>
      </repeat>
    </swiper>
    <view class="vc-article">
      <repeat for="{{vcImg}}" key="item" index="index" item="item">
        <homeVc :vc.sync="item"></homeVc>
      </repeat>
      <repeat for="{{techData}}" key="item" index="index" item="item">
        <article :item.sync="item"></article>
      </repeat>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import homeVc from '../components/common/homeVc'
  import article from '../components/common/article'
  import {
    connect,
    getStore
  } from 'wepy-redux'
  import {
    asyncHomeSliderImg,
    asyncHomeVcImg,
    asyncArticle
  } from '../store/actions'
  import {
    formatMsgTime
  } from '../utils/format'
  import Request from '../api/home'
  // import urlTest from '../api/urlTest'
  import { DOMParser } from '../utils/xml2json/dom-parser'
  const store = getStore()
  @connect({
    silderImg(state) {
      return state.homePage.sliderImg
    },
    vcImg(state) {
      // state.homePage.vcImg.pubDate = formatMsgTime(new Date())
      return state.homePage.vcImg
    },
    techData(state) {
      return state.actionsCom.articleData
    }
  })
  export default class extends wepy.page {
    config = {
      navigationBarTitleText: '十分之约'
    }
    data = {
      indicatorDots: true,
      autoplay: true,
      interval: 5000,
      duration: 500,
      indicatorColor: 'rgba(255, 255, 255, .8)',
      indicatorActiveColor: '#FF6A3C',
      url: {
        article: './techArticle'
      }
    }
    components = {
      homeVc,
      article
    }
    async setVcGridData(data, type) {
      wepy.showLoading({
        title: 'loading...'
      })
      const xmlParser = new DOMParser()
      const doc = xmlParser.parseFromString(data)
      const item = [...doc.getElementsByTagName('item')].map(item => {
        const reg = /(?:<img[^]+?src=")(.*?\.(?:jpg|gif|png|jpeg))(?:"[^]+?\/>)/i
        const title = item.getElementsByTagName('title')[0].childNodes[0].data
        const link = item.getElementsByTagName('link')[0].childNodes[0].data
        const pubDate = formatMsgTime(new Date(item.getElementsByTagName('pubDate')[0].childNodes[0].data))
        const cover = reg.exec(item.getElementsByTagName('content:encoded')[0].firstChild.data)[1]
        const miniCover = cover.replace(/^(https.*?\.)(jpg|gif|png|jpeg)$/i, function(a, b, c) {
          return `${b.substr(0, b.length - 1)}-326x235.${c}`
        })
        // const testUrl = 1 // await urlTest.test(miniCover)
        return {
          title,
          link,
          pubDate,
          cover,
          miniCover
        }
      })
      return Promise.all([store.dispatch(asyncHomeSliderImg(item.slice(0, 3))), store.dispatch(asyncHomeVcImg(item.slice(3)))])
    }
    async setTechGridData(data) {
      const xmlParser = new DOMParser()
      const doc = xmlParser.parseFromString(data)
      const item = [...doc.getElementsByTagName('item')].map(item => {
        const reg = /(?:<img[^]+?src=")(.*?\.(?:jpg|gif|png|jpeg))(?:"[^]+?\/>)/i
        const title = item.getElementsByTagName('title')[0].childNodes[0].data
        const link = item.getElementsByTagName('link')[0].childNodes[0].data
        const pubDate = formatMsgTime(new Date(item.getElementsByTagName('pubDate')[0].childNodes[0].data))
        const cover = reg.exec(item.getElementsByTagName('content:encoded')[0].firstChild.data)[1]
        const miniCover = cover.replace(/^(https.*?\.)(jpg|gif|png|jpeg)$/i, function(a, b, c) {
          return `${b.substr(0, b.length - 1)}-326x235.${c}`
        })
        // const testUrl = 0 // await urlTest.test(miniCover)
        return {
          title,
          link,
          pubDate,
          cover,
          miniCover
        }
      })
      return store.dispatch(asyncArticle(item))
    }
    async onLoad() {
      wepy.showLoading({
        title: 'loading...'
      })
      // 加载投资专栏数据
      const homeVcData = await Request.getVcInfo()
      await this.setVcGridData(homeVcData)
      // 加载cn.technode官网数据
      const homeTechData = await Request.getTechInfo()
      await this.setTechGridData(homeTechData)
      wepy.hideLoading()
    }
    methods = {
      spiderJump(e) {
        wepy.navigateTo({
          url: `techArticle?link=${e.currentTarget.dataset.link}`
        })
      },
      handleError() {
        if (this.silderImg.miniCover !== this.silderImg.item.cover) this.silderImg.miniCover = this.silderImg.item.cover
      }
    }
  }
</script>

<style lang="less">
  .slider-box {
    .slider-item {
      position: relative;
      .slide-image {
        width: 100vw;
        height: 100%;
      }
      .slider-content{
        position:absolute;
        left: 30rpx;
        right: 30rpx;
        bottom: 30rpx;
        margin:auto;
        text-shadow: 1px 1px 1px #888888;
        .slider-txt {
          color:white;
          font-size: 36rpx;
          font-weight: bold;
        }
        .slider-time{
          display: flex;
          color: #ffffff;
        }
      }
    }
  }
  .vc-article{
    padding: 0 0 30rpx;
  }
</style>
