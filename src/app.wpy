<style lang='less'>
  @import './styles/base';
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import {
    setStore,
    getStore
  } from 'wepy-redux'
  import configStore from './store'
  import login from './api/login'
  import { asyncToken } from './store/actions'
  const store = configStore()
  setStore(store)
  export default class extends wepy.app {
    config = {
      pages: [
        'pages/home',
        'pages/vc',
        'pages/startup',
        'pages/userInfo',
        'pages/communicated',
        'pages/comDetails',
        'pages/vcApply',
        'pages/entApply',
        'pages/vcIntroduced',
        'pages/techArticle'
      ],
      window: {
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#f8f8f8',
        navigationBarTextStyle: 'black'
      },
      tabBar: {
        'color': '#666',
        'selectedColor': '#ff6a3c',
        'backgroundColor': '#fff',
        'borderStyle': '#f6f6f6',
        'list': [{
          'pagePath': 'pages/home',
          'text': '主页',
          'selectedIconPath': './images/icon-home-selected.png',
          'iconPath': './images/icon-home.png'
        }, {
          'pagePath': 'pages/vc',
          'text': '投资机构',
          'selectedIconPath': './images/icon-vc-selected.png',
          'iconPath': './images/icon-vc.png'
        }, {
          'pagePath': 'pages/startup',
          'text': '创业项目',
          'selectedIconPath': './images/icon-startup-selected.png',
          'iconPath': './images/icon-startup.png'
        }, {
          'pagePath': 'pages/userInfo',
          'text': '个人信息',
          'selectedIconPath': './images/icon-user-selected.png',
          'iconPath': './images/icon-user.png'
        }]
      }
    }
    globalData = {
      userInfo: null,
      baseUrl: 'https://vcmeetup.technode.com/api'
    }
    constructor() {
      super()
      // this.use('requestfix')
      this.use('promisify')
    }
    async onLaunch() {
      // const token = await wepy.getStorage({key: 'token'})
      // console.log(`获取到的token`, token)
      const store = getStore()
      try {
        await wepy.checkSession()
        const token = await wepy.getStorage({key: 'token'})
        await store.dispatch(asyncToken(token.data))
        // throw new Error('error')
      } catch (err) {
        console.log(err)
        // session_key 已经失效，需要重新执行登录流程
        console.log(`需要登录`)
        try {
          const code = (await wepy.login()).code
          console.log(code)
          try {
            const user = await wepy.getStorage({key: 'userInfo'})
            const userInfo = user.data
            const result = await login.login(code, { ...userInfo })
            console.log(`token`, result.data.jwt)
            await store.dispatch(asyncToken(result.data.jwt))
            wepy.setStorage({
              key: 'token',
              data: result.data.jwt
            })
          } catch (err) {
            console.log(`err`, err)
          }
        } catch (err) {
          console.log('登录失败！', err)
        }
      }
      try {
        const systemInfo = await wepy.getSystemInfo()
        wepy.setStorage({
          key: 'systemInfo',
          data: systemInfo
        })
      } catch (err) {
        console.log(err)
      }
    }
    getUserInfo(cb) {
      const that = this
      if (this.globalData.userInfo) {
        return this.globalData.userInfo
      }
      wepy.getUserInfo({
        success(res) {
          that.globalData.userInfo = res.userInfo
          cb && cb(res.userInfo)
        }
      })
    }
  }
</script>
